{"mappings":"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","sources":["src/js/scrolTo.js","src/js/sendMail.js","src/js/animation.js","src/js/swiper.js"],"sourcesContent":["function scrollToSection(sectionId) {\n    var section = document.getElementById(sectionId);\n    if (section) {\n        section.scrollIntoView({ behavior: 'smooth' });\n    }\n  }\n  \n  const journeyBtn = document.querySelector(\".journey-btn\");\n  \n  const onGetInTouchClick = () => {\n    scrollToSection('getInTouch')\n  }\n  \n  \n  journeyBtn.addEventListener(\"click\", onGetInTouchClick);\n  \n  ","var form = document.getElementById(\"my-form\");\n\nasync function handleSubmit(event) {\n  event.preventDefault();\n  var status = document.getElementById(\"my-form-status\");\n  var hasEmptyField = false;\n\n  for (var i = 0; i < form.elements.length; i++) {\n    var field = form.elements[i];\n\n    if (field.value.trim() === '') {\n      field.setAttribute('required', 'required');\n      hasEmptyField = true;\n    } else {\n      field.removeAttribute('required');\n    }\n  }\n\n  if (hasEmptyField) {\n    status.innerHTML = 'Oops! There was a problem submitting your form. Please fill in all required fields.';\n    console.log(\"There are empty fields\");\n  }\n\n  var data = new FormData(event.target);\n  try {\n    var response = await fetch(event.target.action, {\n      method: form.method,\n      body: data,\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n\n    if (response.ok) {\n      status.innerHTML = \"Thank you for your message! We will contact you soon.\";\n      form.reset();\n    } else {\n      var responseData = await response.json();\n      if (responseData.hasOwnProperty('errors')) {\n        status.innerHTML = responseData.errors.map(error => error.message).join(\", \");\n        console.log(responseData.errors);\n      } else {\n        status.innerHTML = \"Oops! There was a problem submitting your form\";\n      }\n    }\n  } catch (error) {\n    console.log(error);\n    status.innerHTML = \"Oops! There was a problem submitting your form\";\n  }\n}\n\nform.addEventListener(\"submit\", handleSubmit);\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  var textarea = document.getElementById(\"message\");\n\n  textarea.addEventListener(\"click\", function() {\n    this.setSelectionRange(0, 0);\n  });\n});\n","const journey = document.querySelectorAll(\".journey-container\");\n\n const journeyObserver = new IntersectionObserver((entries) => {\n  entries.forEach((entry) => {\n    if (entry.isIntersecting) {\n      const focusElement = entry.target;\n      focusElement.classList.add('animate__animated', 'animate__slideInLeft');\n    }\n  });\n});\n\njourney.forEach((focusElement) => {\n  journeyObserver.observe(focusElement);\n});\n\nconst fuel = document.querySelectorAll(\".fuel-container\");\n\nconst fuelObserver = new IntersectionObserver((entries) => {\n entries.forEach((entry) => {\n   if (entry.isIntersecting) {\n     const focusElement = entry.target;\n     focusElement.classList.add('animate__animated', 'animate__slideInLeft');\n   }\n });\n});\n\nfuel.forEach((focusElement) => {\n  fuelObserver.observe(focusElement);\n});\n\nconst resourses = document.querySelectorAll(\".resourses-container\");\n\nconst resoursesObserver = new IntersectionObserver((entries) => {\n entries.forEach((entry) => {\n   if (entry.isIntersecting) {\n     const focusElement = entry.target;\n     focusElement.classList.add('animate__animated', 'animate__backInRight');\n   }\n });\n});\n\nresourses.forEach((focusElement) => {\n  resoursesObserver.observe(focusElement);\n});\n \n\n const ourFocus = document.querySelectorAll(\".our-focus-section-wrap\");\n\n const ourFocusObserver = new IntersectionObserver((entries) => {\n  entries.forEach((entry) => {\n    if (entry.isIntersecting) {\n      const focusElement = entry.target;\n      focusElement.classList.add('animate__animated', 'animate__fadeIn');\n    }\n  });\n});\n\nourFocus.forEach((focusElement) => {\n  ourFocusObserver.observe(focusElement);\n});\n \n const serviceCards = document.querySelectorAll(\".service-card\");\n\nconst intersectionObserver = new IntersectionObserver((entries) => {\n  entries.forEach((entry) => {\n    if (entry.isIntersecting) {\n      const card = entry.target;\n      card.classList.add('animate__animated', 'animate__fadeInRight');\n    }\n  });\n});\n\nserviceCards.forEach((card) => {\n  intersectionObserver.observe(card);\n});\n\n\nconst serviseCardTxt = document.querySelectorAll(\".card-text\");\nconst ReadMore = document.querySelectorAll(\".readMore\");\n\nReadMore.forEach((button, index) => {\n  let isOpen = false;\n\n  button.addEventListener(\"click\", () => {\n    if (isOpen) {\n      serviseCardTxt[index].style.minHeight = \"113px\";\n      button.textContent = \"Read more\";\n    } else {\n\n      serviseCardTxt[index].style.minHeight = \"300px\";\n      button.textContent = \"Read less\";\n    }\n\n    isOpen = !isOpen;\n  })\n});","const swiper = new Swiper(\".swiper\", {\n    direction: \"horizontal\",\n    spaceBetween: 37,\n    slidesPerView: 3.6,\n    freeMode: true,\n    loop: true,\n    watchSlidesProgress: true,\n    navigation: {\n      nextEl: \".button-next\",\n      prevEl: \".button-prev\"\n    }\n  });"],"names":["document","querySelector","addEventListener","sectionId","section","getElementById","scrollIntoView","behavior","$0198d8318a52310f$var$form","async","event","preventDefault","status","hasEmptyField","i","elements","length","field","value","trim","setAttribute","removeAttribute","innerHTML","console","log","data","FormData","target","response","fetch","action","method","body","headers","Accept","ok","reset","responseData","json","hasOwnProperty","errors","map","error","message","join","this","setSelectionRange","$102a1c8203678332$var$journey","querySelectorAll","$102a1c8203678332$var$journeyObserver","IntersectionObserver","entries","forEach","entry","isIntersecting","classList","add","focusElement","observe","$102a1c8203678332$var$fuel","$102a1c8203678332$var$fuelObserver","$102a1c8203678332$var$resourses","$102a1c8203678332$var$resoursesObserver","$102a1c8203678332$var$ourFocus","$102a1c8203678332$var$ourFocusObserver","$102a1c8203678332$var$serviceCards","$102a1c8203678332$var$intersectionObserver","card","$102a1c8203678332$var$serviseCardTxt","button","index","isOpen","style","minHeight","textContent","Swiper","direction","spaceBetween","slidesPerView","freeMode","loop","watchSlidesProgress","navigation","nextEl","prevEl"],"version":3,"file":"index.5b9db84d.js.map"}