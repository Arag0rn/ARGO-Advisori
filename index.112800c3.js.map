{"mappings":"AAIC,MAAMA,EAAUC,SAASC,iBAAiB,sBAEpCC,EAAkB,IAAIC,sBAAsBC,IACjDA,EAAQC,SAASC,IACf,GAAIA,EAAMC,eAAgB,CACHD,EAAME,OACdC,UAAUC,IAAI,oBAAqB,uB,IAElD,IAGJX,EAAQM,SAASM,IACfT,EAAgBU,QAAQD,EAAa,IAGvC,MAAME,EAAOb,SAASC,iBAAiB,mBAEjCa,EAAe,IAAIX,sBAAsBC,IAC9CA,EAAQC,SAASC,IACf,GAAIA,EAAMC,eAAgB,CACHD,EAAME,OACdC,UAAUC,IAAI,oBAAqB,uB,IAElD,IAGHG,EAAKR,SAASM,IACZG,EAAaF,QAAQD,EAAa,IAGpC,MAAMI,EAAYf,SAASC,iBAAiB,wBAEtCe,EAAoB,IAAIb,sBAAsBC,IACnDA,EAAQC,SAASC,IACf,GAAIA,EAAMC,eAAgB,CACHD,EAAME,OACdC,UAAUC,IAAI,oBAAqB,uB,IAElD,IAGHK,EAAUV,SAASM,IACjBK,EAAkBJ,QAAQD,EAAa,IAIxC,MAAMM,EAAWjB,SAASC,iBAAiB,2BAErCiB,EAAmB,IAAIf,sBAAsBC,IAClDA,EAAQC,SAASC,IACf,GAAIA,EAAMC,eAAgB,CACHD,EAAME,OACdC,UAAUC,IAAI,oBAAqB,kB,IAElD,IAGJO,EAASZ,SAASM,IAChBO,EAAiBN,QAAQD,EAAa,IAGvC,MAAMQ,EAAenB,SAASC,iBAAiB,iBAE1CmB,EAAuB,IAAIjB,sBAAsBC,IACrDA,EAAQC,SAASC,IACf,GAAIA,EAAMC,eAAgB,CACXD,EAAME,OACdC,UAAUC,IAAI,oBAAqB,uB,IAE1C,IAGJS,EAAad,SAASgB,IACpBD,EAAqBR,QAAQS,EAAK,IAIpC,MAAMC,EAAiBtB,SAASC,iBAAiB,cAChCD,SAASC,iBAAiB,aAElCI,SAAQ,CAACkB,EAAQC,KACxB,IAAIC,GAAS,EAEbF,EAAOG,iBAAiB,SAAS,KAC3BD,GACFH,EAAeE,GAAOG,MAAMC,UAAY,QACxCL,EAAOM,YAAc,cAGrBP,EAAeE,GAAOG,MAAMC,UAAY,QACxCL,EAAOM,YAAc,aAGvBJ,GAAUA,CAAM,GAChB,IAOW,IAAIK,OAAO,UAAW,CACnCC,UAAW,aACXC,aAAc,GACdC,cAAe,IACfC,UAAU,EACVC,MAAM,EACNC,qBAAqB,EACrBC,WAAY,CACVC,OAAQ,eACRC,OAAQ,kBAOZ,IAAIC,EAAOxC,SAASyC,eAAe,WA6BnCD,EAAKd,iBAAiB,UA3BtBgB,eAA4BC,GAC1BA,EAAMC,iBACN,IAAIC,EAAS7C,SAASyC,eAAe,kBACjCK,EAAO,IAAIC,SAASJ,EAAMnC,QAC9BwC,MAAML,EAAMnC,OAAOyC,OAAQ,CACzBC,OAAQV,EAAKU,OACbC,KAAML,EACNM,QAAS,CACLC,OAAU,sBAEbC,MAAKC,IACFA,EAASC,IACXX,EAAOY,UAAY,uDACnBjB,EAAKkB,SAELH,EAASI,OAAOL,MAAKM,IACfC,OAAOC,OAAOF,EAAM,UACtBf,EAAOY,UAAYG,EAAa,OAAEG,KAAIC,GAASA,EAAe,UAAGC,KAAK,MAEtEpB,EAAOY,UAAY,gDAAgD,GAErE,IAEHS,OAAMF,IACPnB,EAAOY,UAAY,gDAAgD,G","sources":["src/index.js"],"sourcesContent":["\n\n // observer and animation\n\n const journey = document.querySelectorAll(\".journey-container\");\n\n const journeyObserver = new IntersectionObserver((entries) => {\n  entries.forEach((entry) => {\n    if (entry.isIntersecting) {\n      const focusElement = entry.target;\n      focusElement.classList.add('animate__animated', 'animate__slideInLeft');\n    }\n  });\n});\n\njourney.forEach((focusElement) => {\n  journeyObserver.observe(focusElement);\n});\n\nconst fuel = document.querySelectorAll(\".fuel-container\");\n\nconst fuelObserver = new IntersectionObserver((entries) => {\n entries.forEach((entry) => {\n   if (entry.isIntersecting) {\n     const focusElement = entry.target;\n     focusElement.classList.add('animate__animated', 'animate__slideInLeft');\n   }\n });\n});\n\nfuel.forEach((focusElement) => {\n  fuelObserver.observe(focusElement);\n});\n\nconst resourses = document.querySelectorAll(\".resourses-container\");\n\nconst resoursesObserver = new IntersectionObserver((entries) => {\n entries.forEach((entry) => {\n   if (entry.isIntersecting) {\n     const focusElement = entry.target;\n     focusElement.classList.add('animate__animated', 'animate__backInRight');\n   }\n });\n});\n\nresourses.forEach((focusElement) => {\n  resoursesObserver.observe(focusElement);\n});\n \n\n const ourFocus = document.querySelectorAll(\".our-focus-section-wrap\");\n\n const ourFocusObserver = new IntersectionObserver((entries) => {\n  entries.forEach((entry) => {\n    if (entry.isIntersecting) {\n      const focusElement = entry.target;\n      focusElement.classList.add('animate__animated', 'animate__fadeIn');\n    }\n  });\n});\n\nourFocus.forEach((focusElement) => {\n  ourFocusObserver.observe(focusElement);\n});\n \n const serviceCards = document.querySelectorAll(\".service-card\");\n\nconst intersectionObserver = new IntersectionObserver((entries) => {\n  entries.forEach((entry) => {\n    if (entry.isIntersecting) {\n      const card = entry.target;\n      card.classList.add('animate__animated', 'animate__fadeInRight');\n    }\n  });\n});\n\nserviceCards.forEach((card) => {\n  intersectionObserver.observe(card);\n});\n\n\nconst serviseCardTxt = document.querySelectorAll(\".card-text\");\nconst ReadMore = document.querySelectorAll(\".readMore\");\n\nReadMore.forEach((button, index) => {\n  let isOpen = false;\n\n  button.addEventListener(\"click\", () => {\n    if (isOpen) {\n      serviseCardTxt[index].style.minHeight = \"113px\";\n      button.textContent = \"Read more\";\n    } else {\n\n      serviseCardTxt[index].style.minHeight = \"300px\";\n      button.textContent = \"Read less\";\n    }\n\n    isOpen = !isOpen;\n  })\n});\n\n// swiper \n\n\n// init Swiper:\nconst swiper = new Swiper(\".swiper\", {\n  direction: \"horizontal\",\n  spaceBetween: 37,\n  slidesPerView: 3.6,\n  freeMode: true,\n  loop: true,\n  watchSlidesProgress: true,\n  navigation: {\n    nextEl: \".button-next\",\n    prevEl: \".button-prev\"\n  }\n});\n\n\n// send mail \n\nvar form = document.getElementById(\"my-form\");\n    \nasync function handleSubmit(event) {\n  event.preventDefault();\n  var status = document.getElementById(\"my-form-status\");\n  var data = new FormData(event.target);\n  fetch(event.target.action, {\n    method: form.method,\n    body: data,\n    headers: {\n        'Accept': 'application/json'\n    }\n  }).then(response => {\n    if (response.ok) {\n      status.innerHTML = \"Thank you for your message we will contact you soon!\";\n      form.reset()\n    } else {\n      response.json().then(data => {\n        if (Object.hasOwn(data, 'errors')) {\n          status.innerHTML = data[\"errors\"].map(error => error[\"message\"]).join(\", \")\n        } else {\n          status.innerHTML = \"Oops! There was a problem submitting your form\"\n        }\n      })\n    }\n  }).catch(error => {\n    status.innerHTML = \"Oops! There was a problem submitting your form\"\n  });\n}\nform.addEventListener(\"submit\", handleSubmit)\n"],"names":["$1f0dc3b9307be026$var$journey","document","querySelectorAll","$1f0dc3b9307be026$var$journeyObserver","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","focusElement","observe","$1f0dc3b9307be026$var$fuel","$1f0dc3b9307be026$var$fuelObserver","$1f0dc3b9307be026$var$resourses","$1f0dc3b9307be026$var$resoursesObserver","$1f0dc3b9307be026$var$ourFocus","$1f0dc3b9307be026$var$ourFocusObserver","$1f0dc3b9307be026$var$serviceCards","$1f0dc3b9307be026$var$intersectionObserver","card","$1f0dc3b9307be026$var$serviseCardTxt","button","index","isOpen","addEventListener","style","minHeight","textContent","Swiper","direction","spaceBetween","slidesPerView","freeMode","loop","watchSlidesProgress","navigation","nextEl","prevEl","$1f0dc3b9307be026$var$form","getElementById","async","event","preventDefault","status","data1","FormData","fetch","action","method","body","headers","Accept","then","response","ok","innerHTML","reset","json","data","Object","hasOwn","map","error","join","catch"],"version":3,"file":"index.112800c3.js.map"}